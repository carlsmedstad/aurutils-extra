#!/bin/bash -eu

argv0=commit

# Environemnt variables
keep_file=${AUR_KEEP_FILE:-$HOME/.config/aurutils/keep}
host_builddir=${AUR_HOST_BUILDDIR:-}
[ -z "$host_builddir" ] \
  && host_builddir=$(grep '^BUILDDIR=' /etc/makepkg.conf | sed 's/^BUILDDIR=//')
dbroot=$(aur repo -d custom | grep '^root:' | sed 's/^root://')

# Default options
actions=vlhcig
exclude=
force=0

usage() {
  printf >&2 'usage: %s [-h] [-f] [-a <actions: vlhci>] [-e <actions: vlhci>]\n' "$argv0"
  exit 1
}

# Option parsing
opt_short='hfa:e:'
opt_long='help,actions:exclude:'

if opts=$(getopt -o "$opt_short" -l "$opt_long" -n "$argv0" -- "$@"); then
  eval set -- "$opts"
else
  usage
fi

while true; do
  case $1 in
  -a | --actions)
    shift
    actions=$1
    ;;
  -e | --exclude)
    shift
    exclude=$1
    ;;
  -f | --force)
    force=1
    ;;
  -h | --help)
    usage
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

version_check=0
lint=0
host_build=0
chroot_build=0
install=0
git_commit=0

# Parse actions and set variables
for action in $(echo "$actions" | fold -w1 | grep -v "$exclude"); do
  case $action in
  v)
    version_check=1
    ;;
  l)
    lint=1
    ;;
  h)
    host_build=1
    ;;
  c)
    chroot_build=1
    ;;
  i)
    install=1
    ;;
  g)
    git_commit=1
    ;;
  *)
    printf >&2 -- '-- %s: %s: unkown action\n' "$argv0" "$1"
    exit 22 # errno EINVAL
    ;;
  esac
done

if [ "$force" = 1 ]; then
  version_check=0
fi

if [ ! -f PKGBUILD ]; then
  printf >&2 -- '-- %s: PKGBUILD: does not exist\n' "$argv0"
  exit 2 # errno ENOENT
fi

# Source PKGBUILD and check for required variables
var_names=(pkgname pkgver pkgrel arch)
pkgbase=""
unset "${var_names[@]}"
# shellcheck disable=1091
. "$PWD/PKGBUILD"

if [ -n "$pkgbase" ]; then
  _pkgbase="$pkgbase"
else
  # shellcheck disable=2154
  _pkgbase="$pkgname"
fi

check_pkgbuild_vars() {
  for var_name in "${var_names[@]}"; do
    if [ -z "${!var_name}" ]; then
      printf >&2 -- '-- %s: %s: not defined in PKGBUILD\n' "$argv0" "$var_name"
      exit 22 # eerno EINVAL
    fi
  done
}
check_pkgbuild_vars

# shellcheck disable=2154
{
  new_pkgver="$pkgver"
  new_pkgrel="$pkgrel"
  # shellcheck disable=2128
  new_arch="$arch"
}

# Detect wether in a standalone repository or in an aurpublish super-repository
git_root_dir=$(git rev-parse --show-toplevel)
if [ "$git_root_dir" = "$PWD" ]; then
  printf >&2 -- '-- %s: standalone repository detected\n' "$argv0"
  standalone_repository=1
else
  printf >&2 -- '-- %s: aurpublish super-repository detected\n' "$argv0"
  standalone_repository=0
fi

# Ensure version has been bumped
if [ "$version_check" = 1 ]; then
  if [ -z "$(git status --porcelain)" ]; then
    printf >&2 -- '-- %s: %s-%s: nothing to commit\n' "$argv0" "$pkgver" "$pkgrel"
    exit 0
  fi

  old_pkgbuild=$(mktemp)

  if [ "$standalone_repository" = 1 ]; then
    git show "HEAD:PKGBUILD" >> "$old_pkgbuild"
  else
    git show "HEAD:$_pkgbase/PKGBUILD" >> "$old_pkgbuild"
  fi

  # shellcheck disable=1090
  . "$old_pkgbuild"
  check_pkgbuild_vars

  if [ "$pkgver" = "$new_pkgver" ] && [ "$pkgrel" = "$new_pkgrel" ]; then
    printf >&2 -- '-- %s: %s-%s: neither pkgver nor pkgrel bumped\n' "$argv0" "$pkgver" "$pkgrel"
    exit 22 # eerno EINVAL
  fi
fi

if [ "$lint" = 1 ]; then
  printf >&2 -- '-- %s: Checking PKGBUILD with shfmt\n' "$argv0"
  shfmt --diff \
    --indent 2 \
    --language-dialect bash \
    --binary-next-line \
    --space-redirects \
    PKGBUILD

  printf >&2 -- '-- %s: Checking PKGBUILD with shellcheck\n' "$argv0"
  shellcheck \
    --shell=bash \
    --exclude=2034,2128,2154,2164 \
    PKGBUILD

  if [ -n "$(find . -name '*.desktop')" ]; then
    printf >&2 -- '-- %s: Checking desktop entries with desktop-file-validate\n' "$argv0"
    desktop-file-validate ./*.desktop
  fi
fi

printf >&2 -- '-- %s: updating .SRCINFO\n' "$argv0"
makepkg --printsrcinfo > .SRCINFO

printf >&2 -- '-- %s: verying source files\n' "$argv0"
makepkg --verifysource --force

# Run sudo to ensure password is cached
command -v sudo > /dev/null && sudo cat /dev/null

if [ "$host_build" = 1 ]; then
  printf >&2 -- '-- %s: building on host\n' "$argv0"

  mkdir -p "$host_builddir/$_pkgbase/src"
  git -C "$host_builddir/$_pkgbase/src" init
  printf "*\n" > "$host_builddir/$_pkgbase/src/.gitignore"

  aur build --force --sign --syncdeps --verify --remove
fi

if [ "$install" = 1 ]; then
  printf >&2 -- '-- %s: installing package/s\n' "$argv0"
  # shellcheck disable=2154
  for _pkgname in "${pkgname[@]}"; do
    sudo pacman -Sy --noconfirm "$_pkgname"
  done

  if [ -n "$(find . -name '*.service')" ]; then
    printf >&2 -- '-- %s: Checking systemd unit files with systemd-analyze\n' "$argv0"
    systemd-analyze verify ./*.service
  fi
fi

if [ "$chroot_build" = 1 ]; then
  printf >&2 -- '-- %s: building in chroot\n' "$argv0"
  aur chroot --build
fi

printf >&2 -- '-- %s: PKGBUILD: >>> namcap BEGIN\n' "$argv0"
namcap PKGBUILD
printf >&2 -- '-- %s: PKGBUILD: <<< namcap END\n' "$argv0"

if [ "$host_build" = 1 ]; then
  for _pkgname in "${pkgname[@]}"; do
    pkg_path="$dbroot/$_pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst"
    printf >&2 -- '-- %s: %s: >>> namcap BEGIN\n' "$argv0" "$pkg_path"
    namcap "$pkg_path"
    printf >&2 -- '-- %s: %s: <<< namcap END\n' "$argv0" "$pkg_path"
  done
fi

if [ "$chroot_build" = 1 ]; then
  for _pkgname in "${pkgname[@]}"; do
    pkg_path="$_pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst"
    printf >&2 -- '-- %s: %s: >>> namcap BEGIN\n' "$argv0" "$pkg_path"
    namcap "$pkg_path"
    printf >&2 -- '-- %s: %s: <<< namcap END\n' "$argv0" "$pkg_path"
  done
fi

if [ "$install" = 1 ]; then
  for _pkgname in "${pkgname[@]}"; do
    # Uninstall package if not in keep file
    # shellcheck disable=2015
    [ -f "$keep_file" ] \
      && grep --quiet "$_pkgname" "$keep_file" \
      || sudo pacman -Rs --noconfirm "$_pkgname"
  done
fi

if [ "$git_commit" = 1 ]; then
  committable_changes=$(git diff .)$(git diff --cached .)

  if [ -n "$committable_changes" ]; then
    git reset > /dev/null
    git add .
    git status --short --branch
    if [ "$standalone_repository" = 1 ]; then
      git commit --edit --message "upgpkg: $new_pkgver-$new_pkgrel"
    else
      # Commit message is handled by aurpublish
      git commit
    fi
  else
    printf >&2 -- '-- %s: no changes to commit\n' "$argv0"
    if [ "$version_check" = 1 ]; then
      exit 22 # errno EINVAL
    fi
  fi
fi
