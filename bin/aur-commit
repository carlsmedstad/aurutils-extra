#!/bin/bash -eu

argv0=commit

# Environemnt variables
keep_file=${AUR_KEEP_FILE:-$HOME/.config/aurutils/keep}
db_root=${AUR_DBROOT:-/var/lib/repo/custom}

# Default options
actions=vlhci
force=no

usage() {
  printf >&2 'usage: %s [-h] [-f] [-a <actions: vlhci>]\n' "$argv0"
  exit 1
}

# Option parsing
opt_short='hfa:'
opt_long='help,actions:'

if opts=$(getopt -o "$opt_short" -l "$opt_long" -n "$argv0" -- "$@"); then
  eval set -- "$opts"
else
  usage
fi

while true; do
  case $1 in
  -a | --actions)
    shift
    actions=$1
    ;;
  -f | --force)
    force=yes
    ;;
  -h | --help)
    usage
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

version_check=no
lint=no
host_build=no
chroot_build=no
install=no

# Parse actions and set variables
for action in $(echo "$actions" | fold -w1); do
  case $action in
  v)
    version_check=yes
    ;;
  l)
    lint=yes
    ;;
  h)
    host_build=yes
    ;;
  c)
    chroot_build=yes
    ;;
  i)
    install=yes
    ;;
  *)
    printf >&2 'Error: Unknown action - %s\n' "$1"
    exit 22 # errno EINVAL
    ;;
  esac
done

if [ "$force" = yes ]; then
  version_check=no
fi

if [ ! -f PKGBUILD ]; then
  printf >&2 '%s: PKGBUILD: does not exist\n' "$argv0"
  exit 2 # errno ENOENT
fi

# Source PKGBUILD and check for required variables
var_names=(pkgver pkgrel arch)
unset "${var_names[@]}"
# shellcheck disable=1091
. "$PWD/PKGBUILD"

check_pkgbuild_vars() {
  for var_name in "${var_names[@]}"; do
    if [ -z "${!var_name}" ]; then
      printf >&2 '%s: %s: not defined in PKGBUILD\n' "$argv0" "$var_name"
      exit 22 # eerno EINVAL
    fi
  done
}
check_pkgbuild_vars

# shellcheck disable=2154
{
  new_pkgver="$pkgver"
  new_pkgrel="$pkgrel"
  # shellcheck disable=2128
  new_arch="$arch"
}

printf >&2 '%s: updating .SRCINFO\n' "$argv0"
makepkg --printsrcinfo > .SRCINFO

# Ensure version has been bumped
if [ "$version_check" = yes ]; then
  if [ -z "$(git status --porcelain)" ]; then
    printf >&2 '%s: %s-%s: nothing to commit\n' "$argv0" "$pkgver" "$pkgrel"
    exit 0
  fi

  old_pkgbuild=$(mktemp)
  git show HEAD:PKGBUILD >> "$old_pkgbuild"
  # shellcheck disable=1090
  . "$old_pkgbuild"
  check_pkgbuild_vars

  if [ "$pkgver" = "$new_pkgver" ] && [ "$pkgrel" = "$new_pkgrel" ]; then
    printf >&2 '%s: %s-%s: neither pkgver nor pkgrel bumped\n' "$argv0" "$pkgver" "$pkgrel"
    exit 22 # eerno EINVAL
  fi
fi

if [ "$lint" = yes ]; then
  printf >&2 '%s: Checking PKGBUILD with shfmt\n' "$argv0"
  shfmt --diff \
    --indent 2 \
    --language-dialect bash \
    --binary-next-line \
    --space-redirects \
    PKGBUILD

  printf >&2 '%s: Checking PKGBUILD with shellcheck\n' "$argv0"
  shellcheck \
    --shell=bash \
    --exclude=2034,2128,2154,2164 \
    PKGBUILD

  if [ -n "$(find . -name '*.desktop')" ]; then
    printf >&2 '%s: Checking desktop entries with desktop-file-validate\n' "$argv0"
    desktop-file-validate ./*.desktop
  fi
fi

# Run sudo to ensure password is cached
command -v sudo > /dev/null && sudo cat /dev/null

tmpdir=$(mktemp -d)

if [ "$host_build" = yes ]; then
  printf >&2 '%s: building on host\n' "$argv0"
  aur build --force --sign --syncdeps --verify
  namcap "$db_root/$pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst" \
    > "$tmpdir/$pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst-namcap-host.log"
fi
if [ "$chroot_build" = yes ]; then
  printf >&2 '%s: building in chroot\n' "$argv0"
  aur build --force --sign --syncdeps --verify --chroot
  namcap "$db_root/$pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst" \
    > "$tmpdir/$pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst-namcap-chroot.log"
fi

if [ "$install" = yes ]; then
  printf >&2 '%s: installing package/s\n' "$argv0"
  # shellcheck disable=2154
  for _pkgname in "${pkgname[@]}"; do
    sudo pacman -Sy --noconfirm "$_pkgname"
  done

  if [ -n "$(find . -name '*.service')" ]; then
    printf >&2 '%s: Checking systemd unit files with systemd-analyze\n' "$argv0"
    systemd-analyze verify ./*.service
  fi

  for _pkgname in "${pkgname[@]}"; do
    # Uninstall package if not in keep file
    # shellcheck disable=2015
    [ -f "$keep_file" ] \
      && grep --quiet "$_pkgname" "$keep_file" \
      || sudo pacman -Rs --noconfirm "$_pkgname"
  done
fi

printf >&2 '%s: namcap output:\n' "$argv0"

printf >&2 '>>> PKGBUILD BEGIN\n'
namcap PKGBUILD
printf >&2 '<<< PKGBUILD END\n'

for _pkgname in "${pkgname[@]}"; do
  if [ "$host_build" = yes ]; then
    printf >&2 '>>> %s host build BEGIN\n' "$_pkgname"
    cat "$tmpdir/$pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst-namcap-host.log"
    printf >&2 '<<< %s host build END\n' "$_pkgname"
  fi

  if [ "$chroot_build" = yes ]; then
    printf >&2 '>>> %s chroot build BEGIN\n' "$_pkgname"
    cat "$tmpdir/$pkgname-$new_pkgver-$new_pkgrel-${new_arch[0]}.pkg.tar.zst-namcap-chroot.log"
    printf >&2 '<<< %s chroot build END\n' "$_pkgname"
  fi
done

committable_changes=$(git diff)$(git diff --cached)

if [ -n "$committable_changes" ]; then
  git commit -am "Publish version $new_pkgver-$new_pkgrel"
else
  printf >&2 '%s: no changes to commit\n' "$argv0"
  if [ "$version_check" = yes ]; then
    exit 22 # errno EINVAL
  fi
fi
