#!/bin/bash -eu

argv0=commit

# Environemnt variables
keep_file=${AUR_KEEP_FILE:-$HOME/.config/aurutils/keep}
host_builddir=${AUR_HOST_BUILDDIR:-}
[ -z "$host_builddir" ] \
  && host_builddir=$(grep '^BUILDDIR=' /etc/makepkg.conf | sed 's/^BUILDDIR=//')
dbroot=$(aur repo -d custom | grep '^root:' | sed 's/^root://')

# Default options
actions=vlhcig
exclude=
force=0

usage() {
  printf >&2 'usage: %s [-h] [-f] [-a <actions: vlhci>] [-e <actions: vlhci>]\n' "$argv0"
  exit 1
}

# Option parsing
opt_short='hfa:e:'
opt_long='help,actions:exclude:'

if opts=$(getopt -o "$opt_short" -l "$opt_long" -n "$argv0" -- "$@"); then
  eval set -- "$opts"
else
  usage
fi

while true; do
  case $1 in
  -a | --actions)
    shift
    actions=$1
    ;;
  -e | --exclude)
    shift
    exclude=$1
    ;;
  -f | --force)
    force=1
    ;;
  -h | --help)
    usage
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

version_check=0
lint=0
host_build=0
chroot_build=0
do_install=0
git_commit=0

# Parse actions and set variables
for action in $(echo "$actions" | fold -w1); do
  echo "$exclude" | grep --quiet "$action" && continue
  case $action in
  v)
    version_check=1
    ;;
  l)
    lint=1
    ;;
  h)
    host_build=1
    ;;
  c)
    chroot_build=1
    ;;
  i)
    do_install=1
    ;;
  g)
    git_commit=1
    ;;
  *)
    printf >&2 -- '-- %s: %s: unkown action\n' "$argv0" "$1"
    exit 22 # errno EINVAL
    ;;
  esac
done

if [ "$force" = 1 ]; then
  version_check=0
fi

if [ ! -f PKGBUILD ]; then
  printf >&2 -- '-- %s: PKGBUILD: does not exist\n' "$argv0"
  exit 2 # errno ENOENT
fi

parse_srcinfo() {
  pkgbase=
  pkgnames=()
  pkgver=
  pkgrel=
  archs=()
  while IFS=' = ' read -r key value; do
    case $key in
    *pkgbase)
      pkgbase=$value
      ;;
    *pkgname)
      pkgnames+=("$value")
      ;;
    *pkgver)
      pkgver=$value
      ;;
    *pkgrel)
      pkgrel=$value
      ;;
    *arch)
      archs+=("$value")
      ;;
    *) ;;
    esac
  done < "$1"
}

printf >&2 -- '-- %s: updating .SRCINFO\n' "$argv0"
makepkg --printsrcinfo > .SRCINFO

# Ensure version has been bumped
if [ "$version_check" = 1 ]; then
  old_srcinfo=$(mktemp)
  git show "HEAD:.SRCINFO" >> "$old_srcinfo"
  parse_srcinfo "$old_srcinfo"

  old_pkgver=$pkgver
  old_pkgrel=$pkgrel

  parse_srcinfo "$PWD/.SRCINFO"

  if [ -z "$(git status --porcelain)" ]; then
    printf >&2 -- '-- %s: %s-%s: nothing to commit\n' "$argv0" "$pkgver" "$pkgrel"
    exit 0
  fi
  if [ "$old_pkgver" = "$pkgver" ] && [ "$old_pkgrel" = "$pkgrel" ]; then
    printf >&2 -- '-- %s: %s-%s: neither pkgver nor pkgrel bumped\n' "$argv0" "$pkgver" "$pkgrel"
    exit 22 # eerno EINVAL
  fi
fi

parse_srcinfo "$PWD/.SRCINFO"

if [ "$lint" = 1 ]; then
  printf >&2 -- '-- %s: Checking PKGBUILD with shfmt\n' "$argv0"
  shfmt --diff \
    --indent 2 \
    --language-dialect bash \
    --binary-next-line \
    --space-redirects \
    PKGBUILD

  printf >&2 -- '-- %s: Checking PKGBUILD with shellcheck\n' "$argv0"
  shellcheck \
    --shell=bash \
    --exclude=2034,2128,2154,2155,2164 \
    PKGBUILD

  if [ -n "$(find . -name '*.desktop')" ]; then
    printf >&2 -- '-- %s: Checking desktop entries with desktop-file-validate\n' "$argv0"
    desktop-file-validate ./*.desktop
  fi
fi

printf >&2 -- '-- %s: verifying source files\n' "$argv0"
makepkg --verifysource --force

# Run sudo to ensure password is cached
command -v sudo > /dev/null && sudo cat /dev/null

if [ "$host_build" = 1 ]; then
  printf >&2 -- '-- %s: building on host\n' "$argv0"

  # Some build systems (e.g. hatch for Python) infer files to include from the
  # .gitignore of any parent repository. Add a .gitignore excluding everything
  # to catch these cases in order to mitigate them in the PKGBUILD.
  mkdir -p "$host_builddir/$pkgbase/src"
  git -C "$host_builddir/$pkgbase/src" init --quiet
  git -C "$host_builddir/$pkgbase/src" commit \
    --quiet --allow-empty --message "TMP"
  printf "*\n" > "$host_builddir/$pkgbase/src/.gitignore"

  aur build --force --sign --syncdeps --verify --remove
fi

if [ "$do_install" = 1 ]; then
  printf >&2 -- '-- %s: installing package/s\n' "$argv0"
  # shellcheck disable=2154
  for pkgname in "${pkgnames[@]}"; do
    sudo pacman -Sy --noconfirm "$pkgname"
  done

  if [ -n "$(find . -name '*.service')" ]; then
    printf >&2 -- '-- %s: Checking systemd unit files with systemd-analyze\n' "$argv0"
    systemd-analyze verify ./*.service
  fi
fi

if [ "$chroot_build" = 1 ]; then
  printf >&2 -- '-- %s: building in chroot\n' "$argv0"
  mkdir -p "$HOME/.cache/ccache"
  aur chroot --build --bind-rw "$HOME/.cache/ccache:/ccache"
fi

printf >&2 -- '-- %s: PKGBUILD: >>> namcap BEGIN\n' "$argv0"
namcap PKGBUILD
printf >&2 -- '-- %s: PKGBUILD: <<< namcap END\n' "$argv0"

if [ "$host_build" = 1 ]; then
  for pkgname in "${pkgnames[@]}"; do
    pkg_path="$dbroot/$pkgname-$pkgver-$pkgrel-${archs[0]}.pkg.tar.zst"
    printf >&2 -- '-- %s: %s: >>> namcap BEGIN\n' "$argv0" "$pkg_path"
    namcap "$pkg_path"
    printf >&2 -- '-- %s: %s: <<< namcap END\n' "$argv0" "$pkg_path"
  done
fi

if [ "$chroot_build" = 1 ]; then
  for pkgname in "${pkgnames[@]}"; do
    pkg_path="$pkgname-$pkgver-$pkgrel-${archs[0]}.pkg.tar.zst"
    printf >&2 -- '-- %s: %s: >>> namcap BEGIN\n' "$argv0" "$pkg_path"
    namcap "$pkg_path"
    printf >&2 -- '-- %s: %s: <<< namcap END\n' "$argv0" "$pkg_path"
  done
fi

if [ "$do_install" = 1 ]; then
  remove_pkgs=()
  for pkgname in "${pkgnames[@]}"; do
    # Skip this package if it's in the keep file
    [ -f "$keep_file" ] && grep --quiet "$pkgname" "$keep_file" && continue
    remove_pkgs+=("$pkgname")
  done
  if [ ${#remove_pkgs[@]} -gt 0 ]; then
    sudo pacman -Rs --noconfirm "${remove_pkgs[@]}" \
      || printf >&2 -- '-- %s: WARNING: Could not unistall packages\n' "$argv0"
  fi
fi

if [ "$git_commit" = 1 ]; then
  committable_changes=$(git diff .)$(git diff --cached .)

  if [ -n "$committable_changes" ]; then
    git reset > /dev/null
    git add -u PKGBUILD .SRCINFO
    git status --short --branch
    git commit --edit --message "upgpkg: $pkgver-$pkgrel"
  else
    printf >&2 -- '-- %s: no changes to commit\n' "$argv0"
    if [ "$version_check" = 1 ]; then
      exit 22 # errno EINVAL
    fi
  fi
fi
