#!/bin/sh -eu

argv0=sync-super-repo

usage() {
  printf >&2 'usage: %s [-h] PACKAGE...\n' "$argv0"
  exit 1
}

# Option parsing
opt_short='h'
opt_long='help'

if opts=$(getopt -o "$opt_short" -l "$opt_long" -n "$argv0" -- "$@"); then
  eval set -- "$opts"
else
  usage
fi

while true; do
  case $1 in
  -h | --help)
    usage
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

aur_super_repo=${AUR_SUPER_REPO:?}

clone_and_copy() {
  pkg=$1

  tmp_dir=$(mktemp -d "${TMPDIR:-/tmp}/pkgbuilds.XXXXXX")
  git clone --depth 1 "https://aur.archlinux.org/$pkg.git" "$tmp_dir"

  mkdir -p "$pkg"
  for file in $(git -C "$tmp_dir" ls-files); do
    cp "$tmp_dir/$file" "$pkg/$file"
  done

  rm -rf "$tmp_dir"
}

cd "$aur_super_repo"

for pkg in "$@"; do
  remote_url="https://aur.archlinux.org/$pkg.git"
  upstream_commit_hash=$(
    git ls-remote "$remote_url" refs/heads/master \
      | awk '{ print $1 }'
  )

  if [ -f "$pkg" ]; then
    printf >&2 -- '-- %s: %s: ERROR: is a file\n' "$argv0" "$pkg"
    exit 1
  fi
  if [ -n "$(git status --porcelain "$pkg")" ]; then
    printf >&2 -- '-- %s: %s: ERROR: dirty\n' "$argv0" "$pkg"
    exit 1
  fi

  if [ -d "$pkg" ]; then
    if ! git ls-files --error-unmatch "$pkg/" > /dev/null; then
      printf >&2 -- '-- %s: %s: ERROR: directory untracked\n' "$argv0" "$pkg"
      exit 1
    fi

    local_commit_hash=$(
      git log -1 --format="%B" -- "$pkg" \
        | head -1 \
        | awk '{ print $3 }'
    )
    if [ "$local_commit_hash" = "$upstream_commit_hash" ]; then
      printf >&2 -- '-- %s: %s: no changes\n' "$argv0" "$pkg"
      continue
    fi

    rm -rf "$pkg"
    clone_and_copy "$pkg"
    git add "$pkg"
    git commit -m "upgpkg: $pkg: $upstream_commit_hash"
    printf >&2 -- '-- %s: %s: %s: updated package\n' "$argv0" "$pkg" "$upstream_commit_hash"
    continue
  fi

  clone_and_copy "$pkg"
  git add "$pkg"
  git commit -m "addpkg: $pkg: $upstream_commit_hash"
  printf >&2 -- '-- %s: %s: %s: added package\n' "$argv0" "$pkg" "$upstream_commit_hash"
done
